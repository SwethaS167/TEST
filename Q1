Create table employee(emp_id Integer,emp_name Varchar(25),emp_salary Integer, created_on Date);


namespace AspWebApi_Crud.Controllers
{
    public class CrudApiController : ApiController
    {
        web_api_crud_dbEntities db = new web_api_crud_dbEntities();

        [System.Web.Http.HttpGet]
        public IHttpActionResult GetEmployees()
        {
            List<Employee> list = db.Employees.ToList();
            return Ok(list);
        }

        [System.Web.Http.HttpGet]
        public IHttpActionResult GetEmployeeById(int emp_id)
        {
            var emp = db.Employees.Where(model => model.emp_id == emp_id).FirstOrDefault();
            return Ok(emp);
        }

        [System.Web.Http.HttpPost]
        public IHttpActionResult EmpInsert(Employee e)
        {
            db.Employees.Add(e);
            db.SaveChanges();
            return Ok();
        }
        [System.Web.Http.HttpPut]
        public IHttpActionResult EmpUpdate(Employee e)
        {
            db.Entry(e).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            var emp = db.Employees.Where(model => model.emp_id == e.emp_id).FirstOrDefault();
            if(emp != null)
            {
                emp.emp_id = e.emp_id;
                emp.emp_name = e.emp_name;
                emp.emp_salary = e.emp_salary;
                emp.Created_on = e.Created_on;
           
                 
              db.SaveChanges();
           }
           else
           {
                return NotFound();
           }

            return Ok();
        }
        [System.Web.Http.HttpDelete]
        public IHttpActionResult EmpDelete(int emp_id)
        {
            var emp = db.Employees.Where(model => model.emp_id == emp_id).FirstOrDefault();
            db.Entry(emp).State = System.Data.Entity.EntityState.Deleted;
            db.SaveChanges();
            return Ok();
        }
    }
}




namespace AspWebApi_Crud.Controllers
{
    public class CrudMvcController : Controller
    {
        // GET: CrudMvc
        HttpClient client = new HttpClient();
        public ActionResult Index()
        {
            List<Employee> emp_list = new List<Employee>();
            client.BaseAddress = new Uri("http://localhost:1516/api/CrudApi");
            var response = client.GetAsync("CrudApi");
            response.Wait();

            var test = response.Result;
            if(test.IsSuccessStatusCode)
            {
                var display = test.Content.ReadAsAsync<List<Employee>>();
                display.Wait();
                emp_list = display.Result;
            }

            return View(emp_list);
        }

        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Create(Employee emp)
        {
            client.BaseAddress = new Uri("http://localhost:1516/api/CrudApi");
            var response = client.PostAsJsonAsync<Employee>("CrudApi", emp);
            response.Wait();

            var test = response.Result;
            if (test.IsSuccessStatusCode)
            {
                return RedirectToAction("Index");
            }

            return View("Create");
        }
        public ActionResult Details(int emp_id)
        {
            Employee e = null;
            client.BaseAddress = new Uri("http://localhost:1516/api/CrudApi");
            var response = client.GetAsync("CrudApi?emp_id="+ emp_id.ToString());
            response.Wait();

            var test = response.Result;
            if (test.IsSuccessStatusCode)
            {
                var display = test.Content.ReadAsAsync<Employee>();
                display.Wait();
                e = display.Result;
            }
            return View(e);
        }
        public ActionResult Edit(int emp_id)
        {
            Employee e = null;
            client.BaseAddress = new Uri("http://localhost:1516/api/CrudApi");
            var response = client.GetAsync("CrudApi?id=" + emp_id.ToString());
            response.Wait();

            var test = response.Result;
            if (test.IsSuccessStatusCode)
            {
                var display = test.Content.ReadAsAsync<Employee>();
                display.Wait();
                e = display.Result;
            }
            return View(e);
        }
        [HttpPost]
        public ActionResult Edit(Employee e)
        {
            client.BaseAddress = new Uri("http://localhost:1516/api/CrudApi");
            var response = client.PutAsJsonAsync<Employee>("CrudApi", e);
            response.Wait();

            var test = response.Result;
            if (test.IsSuccessStatusCode)
            {
                return RedirectToAction("Index");
            }

            return View("Edit");
        }
        public ActionResult Delete(int emp_id)
        {
            Employee e = null;
            client.BaseAddress = new Uri("http://localhost:1516/api/CrudApi");
            var response = client.GetAsync("CrudApi?emp_id=" + emp_id.ToString());
            response.Wait();

            var test = response.Result;
            if (test.IsSuccessStatusCode)
            {
                var display = test.Content.ReadAsAsync<Employee>();
                display.Wait();
                e = display.Result;
            }
            return View(e);
        }
        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(int emp_id)
        {
            client.BaseAddress = new Uri("http://localhost:1516/api/CrudApi");
            var response = client.DeleteAsync("CrudApi/" + emp_id.ToString() );
            response.Wait();

            var test = response.Result;
            if (test.IsSuccessStatusCode)
            {
                return RedirectToAction("Index");
            }

            return View("Delete");
        }


    }
}
